#[allow(non_snake_case)]
pub mod REG {
    pub const TMC5130_GCONF: u8 = 0x00;
    pub const TMC5130_GSTAT: u8 = 0x01;
    pub const TMC5130_IFCNT: u8 = 0x02;
    pub const TMC5130_SLAVECONF: u8 = 0x03;
    pub const TMC5130_IOIN: u8 = 0x04;
    pub const TMC5130_X_COMPARE: u8 = 0x05;

    pub const TMC5130_IHOLD_IRUN: u8 = 0x10;
    pub const TMC5130_TPOWERDOWN: u8 = 0x11;
    pub const TMC5130_TSTEP: u8 = 0x12;
    pub const TMC5130_TPWMTHRS: u8 = 0x13;
    pub const TMC5130_TCOOLTHRS: u8 = 0x14;
    pub const TMC5130_THIGH: u8 = 0x15;

    pub const TMC5130_RAMPMODE: u8 = 0x20;
    pub const TMC5130_XACTUAL: u8 = 0x21;
    pub const TMC5130_VACTUAL: u8 = 0x22;
    pub const TMC5130_VSTART: u8 = 0x23;
    pub const TMC5130_A1: u8 = 0x24;
    pub const TMC5130_V1: u8 = 0x25;
    pub const TMC5130_AMAX: u8 = 0x26;
    pub const TMC5130_VMAX: u8 = 0x27;
    pub const TMC5130_DMAX: u8 = 0x28;
    pub const TMC5130_D1: u8 = 0x2A;
    pub const TMC5130_VSTOP: u8 = 0x2B;
    pub const TMC5130_TZEROWAIT: u8 = 0x2C;
    pub const TMC5130_XTARGET: u8 = 0x2D;

    pub const TMC5130_VDCMIN: u8 = 0x33;
    pub const TMC5130_SWMODE: u8 = 0x34;
    pub const TMC5130_RAMPSTAT: u8 = 0x35;
    pub const TMC5130_XLATCH: u8 = 0x36;

    pub const TMC5130_ENCMODE: u8 = 0x38;
    pub const TMC5130_XENC: u8 = 0x39;
    pub const TMC5130_ENC_CONST: u8 = 0x3A;
    pub const TMC5130_ENC_STATUS: u8 = 0x3B;
    pub const TMC5130_ENC_LATCH: u8 = 0x3C;

    pub const TMC5130_MSLUT0: u8 = 0x60;
    pub const TMC5130_MSLUT1: u8 = 0x61;
    pub const TMC5130_MSLUT2: u8 = 0x62;
    pub const TMC5130_MSLUT3: u8 = 0x63;
    pub const TMC5130_MSLUT4: u8 = 0x64;
    pub const TMC5130_MSLUT5: u8 = 0x65;
    pub const TMC5130_MSLUT6: u8 = 0x66;
    pub const TMC5130_MSLUT7: u8 = 0x67;
    pub const TMC5130_MSLUTSEL: u8 = 0x68;
    pub const TMC5130_MSLUTSTART: u8 = 0x69;
    pub const TMC5130_MSCNT: u8 = 0x6A;
    pub const TMC5130_MSCURACT: u8 = 0x6B;

    pub const TMC5130_CHOPCONF: u8 = 0x6C;
    pub const TMC5130_COOLCONF: u8 = 0x6D;
    pub const TMC5130_DCCTRL: u8 = 0x6E;
    pub const TMC5130_DRVSTATUS: u8 = 0x6F;
    pub const TMC5130_PWMCONF: u8 = 0x70;
    pub const TMC5130_PWMSTATUS: u8 = 0x71;
    pub const TMC5130_ENCM_CTRL: u8 = 0x72;
    pub const TMC5130_LOST_STEPS: u8 = 0x73;
}

#[allow(non_snake_case)]
pub mod MASK {
    pub const TMC5130_SW_STOPL_ENABLE_MASK: u32 = 0x0001;
    pub const TMC5130_SW_STOPR_ENABLE_MASK: u32 = 0x0002;
    pub const TMC5130_SW_STOPL_POLARITY_MASK: u32 = 0x0004;
    pub const TMC5130_SW_STOPR_POLARITY_MASK: u32 = 0x0008;
    pub const TMC5130_SW_SWAP_LR_MASK: u32 = 0x0010;
    pub const TMC5130_SW_LATCH_L_ACT_MASK: u32 = 0x0020;
    pub const TMC5130_SW_LATCH_L_INACT_MASK: u32 = 0x0040;
    pub const TMC5130_SW_LATCH_R_ACT_MASK: u32 = 0x0080;
    pub const TMC5130_SW_LATCH_R_INACT_MASK: u32 = 0x0100;
    pub const TMC5130_SW_LATCH_ENC_MASK: u32 = 0x0200;
    pub const TMC5130_SW_SG_STOP_MASK: u32 = 0x0400;
    pub const TMC5130_SW_SOFTSTOP_MASK: u32 = 0x0800;
    pub const TMC5130_RS_STOPL_MASK: u32 = 0x0001;
    pub const TMC5130_RS_STOPR_MASK: u32 = 0x0002;
    pub const TMC5130_RS_LATCHL_MASK: u32 = 0x0004;
    pub const TMC5130_RS_LATCHR_MASK: u32 = 0x0008;
    pub const TMC5130_RS_EV_STOPL_MASK: u32 = 0x0010;
    pub const TMC5130_RS_EV_STOPR_MASK: u32 = 0x0020;
    pub const TMC5130_RS_EV_STOP_SG_MASK: u32 = 0x0040;
    pub const TMC5130_RS_EV_POSREACHED_MASK: u32 = 0x0080;
    pub const TMC5130_RS_VELREACHED_MASK: u32 = 0x0100;
    pub const TMC5130_RS_POSREACHED_MASK: u32 = 0x0200;
    pub const TMC5130_RS_VZERO_MASK: u32 = 0x0400;
    pub const TMC5130_RS_ZEROWAIT_MASK: u32 = 0x0800;
    pub const TMC5130_RS_SECONDMOVE_MASK: u32 = 0x1000;
    pub const TMC5130_RS_SG_MASK: u32 = 0x2000;
    pub const TMC5130_I_SCALE_ANALOG_MASK: u32 = 0x01; // GCONF //
    pub const TMC5130_INTERNAL_RSENSE_MASK: u32 = 0x02; // GCONF //
    pub const TMC5130_EN_PWM_MODE_MASK: u32 = 0x04; // GCONF //
    pub const TMC5130_ENC_COMMUTATION_MASK: u32 = 0x08; // GCONF //
    pub const TMC5130_SHAFT_MASK: u32 = 0x10; // GCONF //
    pub const TMC5130_DIAG0_ERROR_ONLY_WITH_SD_MODE1_MASK: u32 = 0x20; // GCONF //
    pub const TMC5130_DIAG0_OTPW_ONLY_WITH_SD_MODE1_MASK: u32 = 0x40; // GCONF //
    pub const TMC5130_DIAG0_STALL_MASK: u32 = 0x80; // GCONF //
    pub const TMC5130_DIAG1_STALL_MASK: u32 = 0x0100; // GCONF //
    pub const TMC5130_DIAG1_INDEX_MASK: u32 = 0x0200; // GCONF //
    pub const TMC5130_DIAG1_ONSTATE_MASK: u32 = 0x0400; // GCONF //
    pub const TMC5130_DIAG1_STEPS_SKIPPED_MASK: u32 = 0x0800; // GCONF //
    pub const TMC5130_DIAG0_INT_PUSHPULL_MASK: u32 = 0x1000; // GCONF //
    pub const TMC5130_DIAG1_POSCOMP_PUSHPULL_MASK: u32 = 0x2000; // GCONF //
    pub const TMC5130_SMALL_HYSTERESIS_MASK: u32 = 0x4000; // GCONF //
    pub const TMC5130_STOP_ENABLE_MASK: u32 = 0x8000; // GCONF //
    pub const TMC5130_DIRECT_MODE_MASK: u32 = 0x010000; // GCONF //
    pub const TMC5130_TEST_MODE_MASK: u32 = 0x020000; // GCONF //
    pub const TMC5130_DIAG0_STEP_MASK: u32 = 0x80; // GCONF //
    pub const TMC5130_DIAG1_DIR_MASK: u32 = 0x0100; // GCONF //
    pub const TMC5130_RESET_MASK: u32 = 0x01; // GSTAT //
    pub const TMC5130_DRV_ERR_MASK: u32 = 0x02; // GSTAT //
    pub const TMC5130_UV_CP_MASK: u32 = 0x04; // GSTAT //
    pub const TMC5130_IFCNT_MASK: u32 = 0xFF; // IFCNT // Interface transmission counter. This register becomes incremented with each successful UART interface write access. Read out to check the serial transmission for lost data. Read accesses do not change the content. The counter wraps around from 255 to 0.
    pub const TMC5130_SLAVEADDR_MASK: u32 = 0xFF; // SLAVECONF // These eight bits set the address of unit for the UART interface. The address becomes incremented by one when the external address pin NEXTADDR is active. Range: 0-253 (254 cannot be incremented)
    pub const TMC5130_SENDDELAY_MASK: u32 = 0x0F00; // SLAVECONF // SENDDELAY for read access (time until reply is sent): 0, 1:  8 bit times 2, 3:  3*8 bit times 4, 5:  5*8 bit times 6, 7:  7*8 bit times 8, 9:  9*8 bit times 10, 11: 11*8 bit times 12, 13: 13*8 bit times 14, 15: 15*8 bit times
    pub const TMC5130_REFL_STEP_MASK: u32 = 0x01; // IOIN / OUTPUT // REFL_STEP
    pub const TMC5130_REFR_DIR_MASK: u32 = 0x02; // IOIN / OUTPUT // REFR_DIR
    pub const TMC5130_ENCB_DCEN_CFG4_MASK: u32 = 0x04; // IOIN / OUTPUT // ENCB_DCEN_CFG4
    pub const TMC5130_ENCA_DCIN_CFG5_MASK: u32 = 0x08; // IOIN / OUTPUT // ENCA_DCIN_CFG5
    pub const TMC5130_DRV_ENN_CFG6_MASK: u32 = 0x10; // IOIN / OUTPUT // DRV_ENN_CFG6
    pub const TMC5130_ENC_N_DCO_MASK: u32 = 0x20; // IOIN / OUTPUT // ENC_N_DCO
    pub const TMC5130_SD_MODE_MASK: u32 = 0x40; // IOIN / OUTPUT // SD_MODE
    pub const TMC5130_SWCOMP_IN_MASK: u32 = 0x80; // IOIN / OUTPUT // SWCOMP_IN
    pub const TMC5130_VERSION_MASK: u32 = 0xFF000000; // IOIN / OUTPUT // VERSION: 0x11=first version of the IC; Identical numbers mean full digital compatibility.
    pub const TMC5130_OUTPUT_PIN_POLARITY_MASK: u32 = 0x01; // IOIN / OUTPUT // Output polarity of SDO_CFG0 pin in UART mode. Its main purpose it to use SDO_CFG0 as NAO next address output signal for chain addressing of multiple ICs. Attention: Reset Value is 1 for use as NAO to next IC in single wire chain
    pub const TMC5130_X_COMPARE_MASK: u32 = 0xFFFFFFFF; // X_COMPARE // Position comparison register for motion controller position strobe. The Position pulse is available on output SWP_DIAG1.
    pub const TMC5130_IHOLD_MASK: u32 = 0x1F; // IHOLD_IRUN // Standstill current (0=1/32...31=32/32) In combination with stealthChop mode, setting IHOLD=0 allows to choose freewheeling or coil short circuit (passive braking) for motor stand still.
    pub const TMC5130_IRUN_MASK: u32 = 0x1F00; // IHOLD_IRUN // Motor run current (0=1/32...31=32/32) Hint: Choose sense resistors in a way, that normal IRUN is 16 to 31 for best microstep performance.
    pub const TMC5130_IHOLDDELAY_MASK: u32 = 0x0F0000; // IHOLD_IRUN // Controls the number of clock cycles for motor power down after standstill is detected (stst=1) and TPOWERDOWN has expired. The smooth transition avoids a motor jerk upon power down. 0:  instant power down 1..15:  Delay per current reduction step in multiple of 2^18 clocks
    pub const TMC5130_TPOWERDOWN_MASK: u32 = 0xFF; // TPOWERDOWN // (Reset default=20) Sets the delay time from stand still (stst) detection to motor current power down. Time range is about 0 to 5.6 seconds. 0...((2^8)-1) * 2^18 tclk Attention: A minimum setting of 2 is required to allow automatic tuning of stealthChop PWM_OFFS_AUTO.
    pub const TMC5130_TSTEP_MASK: u32 = 0x0FFFFF; // TSTEP // Actual measured time between two 1/256 microsteps derived from the step input frequency in units of 1/fCLK. Measured value is (2^20)-1 in case of overflow or stand still. The TSTEP related threshold uses a hysteresis of 1/16 of the compare value to compensate for jitter in the clock or the step frequency: (Txxx*15/16)-1 is the lower compare value for each TSTEP based comparison. This means, that the lower switching velocity equals the calculated setting, but the upper switching velocity is higher as defined by the hysteresis setting.
    pub const TMC5130_TPWMTHRS_MASK: u32 = 0x0FFFFF; // TPWMTHRS // Sets the upper velocity for stealthChop voltage PWM mode.     For TSTEP = TPWMTHRS, stealthChop PWM mode is enabled, if configured. When the velocity exceeds the limit set by TPWMTHRS, the driver switches to spreadCycle. 0 = Disabled
    pub const TMC5130_TCOOLTHRS_MASK: u32 = 0x0FFFFF; // TCOOLTHRS // This is the lower threshold velocity for switching on smart energy coolStep and stallGuard feature. (unsigned) Set this parameter to disable coolStep at low speeds, where it cannot work reliably. The stop on stall function (enable with sg_stop when using internal motion controller) and the stall output signal become enabled when exceeding this velocity. In non-dcStep mode, it becomes disabled again once the velocity falls below this threshold. TCOOLTHRS = TSTEP = THIGH: - coolStep is enabled, if configured - stealthChop voltage PWM mode is disabled TCOOLTHRS = TSTEP - Stop on stall and stall output signal is enabled, if configured
    pub const TMC5130_THIGH_MASK: u32 = 0x0FFFFF; // THIGH // This velocity setting allows velocity dependent switching into a different chopper mode and fullstepping to maximize torque. (unsigned) The stall detection feature becomes switched off for 2-3 electrical periods whenever passing THIGH threshold to compensate for the effect of switching modes. TSTEP = THIGH: - coolStep is disabled (motor runs with normal current scale) - stealthChop voltage PWM mode is disabled - If vhighchm is set, the chopper switches to chm=1 with TFD=0 (constant off time with slow decay, only). - chopSync2 is switched off (SYNC=0) - If vhighfs is set, the motor operates in fullstep mode and the stall detection becomes switched over to dcStep stall detection.
    pub const TMC5130_RAMPMODE_MASK: u32 = 0x03; // RAMPMODE // 0: Positioning mode (using all A, D and V parameters) 1: Velocity mode to positive VMAX (using AMAX acceleration) 2: Velocity mode to negative VMAX (using AMAX acceleration) 3: Hold mode (velocity remains unchanged, unless stop event occurs)
    pub const TMC5130_XACTUAL_MASK: u32 = 0xFFFFFFFF; // XACTUAL // Actual motor position (signed) Hint: This value normally should only be modified, when homing the drive. In positioning mode, modifying the register content will start a motion.
    pub const TMC5130_VACTUAL_MASK: u32 = 0xFFFFFF; // VACTUAL // Actual motor velocity from ramp generator (signed) The sign matches the motion direction. A negative sign means motion to lower XACTUAL.
    pub const TMC5130_VSTART_MASK: u32 = 0x03FFFF; // VSTART // Motor start velocity (unsigned) Set VSTOP = VSTART!
    pub const TMC5130_A1_MASK: u32 = 0xFFFF; // A1 // First acceleration between VSTART and V1 (unsigned)
    pub const TMC5130_V1_MASK: u32 = 0x0FFFFF; // V1 // First acceleration / deceleration phase threshold velocity (unsigned) 0: Disables A1 and D1 phase, use AMAX, DMAX only
    pub const TMC5130_AMAX_MASK: u32 = 0xFFFF; // AMAX // Second acceleration between V1 and VMAX (unsigned) This is the acceleration and deceleration value for velocity mode.
    pub const TMC5130_VMAX_MASK: u32 = 0x7FFFFF; // VMAX // Motion ramp target velocity (for positioning ensure VMAX = VSTART) (unsigned) This is the target velocity in velocity mode. It can be changed any time during a motion.
    pub const TMC5130_DMAX_MASK: u32 = 0xFFFF; // DMAX // Deceleration between VMAX and V1 (unsigned)
    pub const TMC5130_D1_MASK: u32 = 0xFFFF; // D1 // Deceleration between V1 and VSTOP (unsigned) Attention: Do not set 0 in positioning mode, even if V1=0!
    pub const TMC5130_VSTOP_MASK: u32 = 0x03FFFF; // VSTOP // Motor stop velocity (unsigned) Attention: Set VSTOP = VSTART! Attention: Do not set 0 in positioning mode, minimum 10 recommend!
    pub const TMC5130_TZEROWAIT_MASK: u32 = 0xFFFF; // TZEROWAIT // Defines the waiting time after ramping down to zero velocity before next movement or direction inversion can start. Time range is about 0 to 2 seconds. This setting avoids excess acceleration e.g. from VSTOP to -VSTART.
    pub const TMC5130_XTARGET_MASK: u32 = 0xFFFFFFFF; // XTARGET // Target position for ramp mode (signed). Write a new target position to this register in order to activate the ramp generator positioning in RAMPMODE=0. Initialize all velocity, acceleration and deceleration parameters before. Hint: The position is allowed to wrap around, thus, XTARGET value optionally can be treated as an unsigned number. Hint: The maximum possible displacement is +/-((2^31)-1). Hint: When increasing V1, D1 or DMAX during a motion, rewrite XTARGET afterwards in order to trigger a second acceleration phase, if desired.
    pub const TMC5130_VDCMIN_MASK: u32 = 0x7FFFFF; // VDCMIN // Automatic commutation dcStep becomes enabled above velocity VDCMIN (unsigned) (only when using internal ramp generator, not for STEP/DIR interface - in STEP/DIR mode, dcStep becomes enabled by the external signal DCEN) In this mode, the actual position is determined by the sensorless motor commutation and becomes fed back to XACTUAL. In case the motor becomes heavily loaded, VDCMIN also is used as the minimum step velocity. Activate stop on stall (sg_stop) to detect step loss. 0: Disable, dcStep off |VACT| = VDCMIN = 256: - Triggers the same actions as exceeding THIGH setting. - Switches on automatic commutation dcStep Hint: Also set DCCTRL parameters in order to operate dcStep. (Only bits 22 - 8 are used for value and for comparison)
    pub const TMC5130_STOP_L_ENABLE_MASK: u32 = 0x01; // SW_MODE //
    pub const TMC5130_STOP_R_ENABLE_MASK: u32 = 0x02; // SW_MODE //
    pub const TMC5130_POL_STOP_L_MASK: u32 = 0x04; // SW_MODE // Sets the active polarity of the left reference switch input
    pub const TMC5130_POL_STOP_R_MASK: u32 = 0x08; // SW_MODE // Sets the active polarity of the right reference switch input
    pub const TMC5130_SWAP_LR_MASK: u32 = 0x10; // SW_MODE //
    pub const TMC5130_LATCH_L_ACTIVE_MASK: u32 = 0x20; // SW_MODE //
    pub const TMC5130_LATCH_L_INACTIVE_MASK: u32 = 0x40; // SW_MODE //
    pub const TMC5130_LATCH_R_ACTIVE_MASK: u32 = 0x80; // SW_MODE //
    pub const TMC5130_LATCH_R_INACTIVE_MASK: u32 = 0x0100; // SW_MODE //
    pub const TMC5130_EN_LATCH_ENCODER_MASK: u32 = 0x0200; // SW_MODE //
    pub const TMC5130_SG_STOP_MASK: u32 = 0x0400; // SW_MODE //
    pub const TMC5130_EN_SOFTSTOP_MASK: u32 = 0x0800; // SW_MODE // The soft stop mode always uses the deceleration ramp settings DMAX, V1, D1, VSTOP and TZEROWAIT for stopping the motor. A stop occurs when the velocity sign matches the reference switch position (REFL for negative velocities, REFR for positive velocities) and the respective switch stop function is enabled. A hard stop also uses TZEROWAIT before the motor becomes released. Attention: Do not use soft stop in combination with stallGuard2.
    pub const TMC5130_STATUS_STOP_L_MASK: u32 = 0x01; // RAMP_STAT //
    pub const TMC5130_STATUS_STOP_R_MASK: u32 = 0x02; // RAMP_STAT //
    pub const TMC5130_STATUS_LATCH_L_MASK: u32 = 0x04; // RAMP_STAT //
    pub const TMC5130_STATUS_LATCH_R_MASK: u32 = 0x08; // RAMP_STAT //
    pub const TMC5130_EVENT_STOP_L_MASK: u32 = 0x10; // RAMP_STAT //
    pub const TMC5130_EVENT_STOP_R_MASK: u32 = 0x20; // RAMP_STAT //
    pub const TMC5130_EVENT_STOP_SG_MASK: u32 = 0x40; // RAMP_STAT //
    pub const TMC5130_EVENT_POS_REACHED_MASK: u32 = 0x80; // RAMP_STAT //
    pub const TMC5130_VELOCITY_REACHED_MASK: u32 = 0x0100; // RAMP_STAT //
    pub const TMC5130_POSITION_REACHED_MASK: u32 = 0x0200; // RAMP_STAT //
    pub const TMC5130_VZERO_MASK: u32 = 0x0400; // RAMP_STAT //
    pub const TMC5130_T_ZEROWAIT_ACTIVE_MASK: u32 = 0x0800; // RAMP_STAT //
    pub const TMC5130_SECOND_MOVE_MASK: u32 = 0x1000; // RAMP_STAT //
    pub const TMC5130_STATUS_SG_MASK: u32 = 0x2000; // RAMP_STAT //
    pub const TMC5130_XLATCH_MASK: u32 = 0xFFFFFFFF; // XLATCH // Ramp generator latch position, latches XACTUAL upon a programmable switch event (see SW_MODE). Hint: The encoder position can be latched to ENC_LATCH together with XLATCH to allow consistency checks.
    pub const TMC5130_POL_A_MASK: u32 = 0x01; // ENCMODE // Required A polarity for an N channel event
    pub const TMC5130_POL_B_MASK: u32 = 0x02; // ENCMODE // Required B polarity for an N channel event
    pub const TMC5130_POL_N_MASK: u32 = 0x04; // ENCMODE // Defines active polarity of N
    pub const TMC5130_IGNORE_AB_MASK: u32 = 0x08; // ENCMODE //
    pub const TMC5130_CLR_CONT_MASK: u32 = 0x10; // ENCMODE //
    pub const TMC5130_CLR_ONCE_MASK: u32 = 0x20; // ENCMODE //
    pub const TMC5130_POS_EDGENEG_EDGE_MASK: u32 = 0xC0; // ENCMODE //
    pub const TMC5130_CLR_ENC_X_MASK: u32 = 0x0100; // ENCMODE //
    pub const TMC5130_LATCH_X_ACT_MASK: u32 = 0x0200; // ENCMODE //
    pub const TMC5130_ENC_SEL_DECIMAL_MASK: u32 = 0x0400; // ENCMODE //
    pub const TMC5130_X_ENC_MASK: u32 = 0xFFFFFFFF; // X_ENC // Actual encoder position
    pub const TMC5130_INTEGER_MASK: u32 = 0xFFFF0000; // ENC_CONST // Integer part of encoder constant
    pub const TMC5130_FRACTIONAL_MASK: u32 = 0xFFFF; // ENC_CONST // Fractional part of encoder constant
    pub const TMC5130_ENC_STATUS_MASK: u32 = 0x01; // ENC_STATUS // Encoder status
    pub const TMC5130_ENC_LATCH_MASK: u32 = 0xFFFFFFFF; // ENC_LATCH // Encoder position X_ENC latched on N event
    pub const TMC5130_OFS0_MASK: u32 = 0x01; // MSLUT[0] // microstep table entry 0
    pub const TMC5130_OFS1_MASK: u32 = 0x02; // MSLUT[0] // microstep table entry 1
    pub const TMC5130_OFS2_MASK: u32 = 0x04; // MSLUT[0] // microstep table entry 2
    pub const TMC5130_OFS3_MASK: u32 = 0x08; // MSLUT[0] // microstep table entry 3
    pub const TMC5130_OFS4_MASK: u32 = 0x10; // MSLUT[0] // microstep table entry 4
    pub const TMC5130_OFS5_MASK: u32 = 0x20; // MSLUT[0] // microstep table entry 5
    pub const TMC5130_OFS6_MASK: u32 = 0x40; // MSLUT[0] // microstep table entry 6
    pub const TMC5130_OFS7_MASK: u32 = 0x80; // MSLUT[0] // microstep table entry 7
    pub const TMC5130_OFS8_MASK: u32 = 0x0100; // MSLUT[0] // microstep table entry 8
    pub const TMC5130_OFS9_MASK: u32 = 0x0200; // MSLUT[0] // microstep table entry 9
    pub const TMC5130_OFS10_MASK: u32 = 0x0400; // MSLUT[0] // microstep table entry 10
    pub const TMC5130_OFS11_MASK: u32 = 0x0800; // MSLUT[0] // microstep table entry 11
    pub const TMC5130_OFS12_MASK: u32 = 0x1000; // MSLUT[0] // microstep table entry 12
    pub const TMC5130_OFS13_MASK: u32 = 0x2000; // MSLUT[0] // microstep table entry 13
    pub const TMC5130_OFS14_MASK: u32 = 0x4000; // MSLUT[0] // microstep table entry 14
    pub const TMC5130_OFS15_MASK: u32 = 0x8000; // MSLUT[0] // microstep table entry 15
    pub const TMC5130_OFS16_MASK: u32 = 0x010000; // MSLUT[0] // microstep table entry 16
    pub const TMC5130_OFS17_MASK: u32 = 0x020000; // MSLUT[0] // microstep table entry 17
    pub const TMC5130_OFS18_MASK: u32 = 0x040000; // MSLUT[0] // microstep table entry 18
    pub const TMC5130_OFS19_MASK: u32 = 0x080000; // MSLUT[0] // microstep table entry 19
    pub const TMC5130_OFS20_MASK: u32 = 0x100000; // MSLUT[0] // microstep table entry 20
    pub const TMC5130_OFS21_MASK: u32 = 0x200000; // MSLUT[0] // microstep table entry 21
    pub const TMC5130_OFS22_MASK: u32 = 0x400000; // MSLUT[0] // microstep table entry 22
    pub const TMC5130_OFS23_MASK: u32 = 0x800000; // MSLUT[0] // microstep table entry 23
    pub const TMC5130_OFS24_MASK: u32 = 0x01000000; // MSLUT[0] // microstep table entry 24
    pub const TMC5130_OFS25_MASK: u32 = 0x02000000; // MSLUT[0] // microstep table entry 25
    pub const TMC5130_OFS26_MASK: u32 = 0x04000000; // MSLUT[0] // microstep table entry 26
    pub const TMC5130_OFS27_MASK: u32 = 0x08000000; // MSLUT[0] // microstep table entry 27
    pub const TMC5130_OFS28_MASK: u32 = 0x10000000; // MSLUT[0] // microstep table entry 28
    pub const TMC5130_OFS29_MASK: u32 = 0x20000000; // MSLUT[0] // microstep table entry 29
    pub const TMC5130_OFS30_MASK: u32 = 0x40000000; // MSLUT[0] // microstep table entry 30
    pub const TMC5130_OFS31_MASK: u32 = 0x80000000; // MSLUT[0] // microstep table entry 31
    pub const TMC5130_OFS32_MASK: u32 = 0x01; // MSLUT[1] // microstep table entry 32
    pub const TMC5130_OFS33_MASK: u32 = 0x02; // MSLUT[1] // microstep table entry 33
    pub const TMC5130_OFS34_MASK: u32 = 0x04; // MSLUT[1] // microstep table entry 34
    pub const TMC5130_OFS35_MASK: u32 = 0x08; // MSLUT[1] // microstep table entry 35
    pub const TMC5130_OFS36_MASK: u32 = 0x10; // MSLUT[1] // microstep table entry 36
    pub const TMC5130_OFS37_MASK: u32 = 0x20; // MSLUT[1] // microstep table entry 37
    pub const TMC5130_OFS38_MASK: u32 = 0x40; // MSLUT[1] // microstep table entry 38
    pub const TMC5130_OFS39_MASK: u32 = 0x80; // MSLUT[1] // microstep table entry 39
    pub const TMC5130_OFS40_MASK: u32 = 0x0100; // MSLUT[1] // microstep table entry 40
    pub const TMC5130_OFS41_MASK: u32 = 0x0200; // MSLUT[1] // microstep table entry 41
    pub const TMC5130_OFS42_MASK: u32 = 0x0400; // MSLUT[1] // microstep table entry 42
    pub const TMC5130_OFS43_MASK: u32 = 0x0800; // MSLUT[1] // microstep table entry 43
    pub const TMC5130_OFS44_MASK: u32 = 0x1000; // MSLUT[1] // microstep table entry 44
    pub const TMC5130_OFS45_MASK: u32 = 0x2000; // MSLUT[1] // microstep table entry 45
    pub const TMC5130_OFS46_MASK: u32 = 0x4000; // MSLUT[1] // microstep table entry 46
    pub const TMC5130_OFS47_MASK: u32 = 0x8000; // MSLUT[1] // microstep table entry 47
    pub const TMC5130_OFS48_MASK: u32 = 0x010000; // MSLUT[1] // microstep table entry 48
    pub const TMC5130_OFS49_MASK: u32 = 0x020000; // MSLUT[1] // microstep table entry 49
    pub const TMC5130_OFS50_MASK: u32 = 0x040000; // MSLUT[1] // microstep table entry 50
    pub const TMC5130_OFS51_MASK: u32 = 0x080000; // MSLUT[1] // microstep table entry 51
    pub const TMC5130_OFS52_MASK: u32 = 0x100000; // MSLUT[1] // microstep table entry 52
    pub const TMC5130_OFS53_MASK: u32 = 0x200000; // MSLUT[1] // microstep table entry 53
    pub const TMC5130_OFS54_MASK: u32 = 0x400000; // MSLUT[1] // microstep table entry 54
    pub const TMC5130_OFS55_MASK: u32 = 0x800000; // MSLUT[1] // microstep table entry 55
    pub const TMC5130_OFS56_MASK: u32 = 0x01000000; // MSLUT[1] // microstep table entry 56
    pub const TMC5130_OFS57_MASK: u32 = 0x02000000; // MSLUT[1] // microstep table entry 57
    pub const TMC5130_OFS58_MASK: u32 = 0x04000000; // MSLUT[1] // microstep table entry 58
    pub const TMC5130_OFS59_MASK: u32 = 0x08000000; // MSLUT[1] // microstep table entry 59
    pub const TMC5130_OFS60_MASK: u32 = 0x10000000; // MSLUT[1] // microstep table entry 60
    pub const TMC5130_OFS61_MASK: u32 = 0x20000000; // MSLUT[1] // microstep table entry 61
    pub const TMC5130_OFS62_MASK: u32 = 0x40000000; // MSLUT[1] // microstep table entry 62
    pub const TMC5130_OFS63_MASK: u32 = 0x80000000; // MSLUT[1] // microstep table entry 63
    pub const TMC5130_OFS64_MASK: u32 = 0x01; // MSLUT[2] // microstep table entry 64
    pub const TMC5130_OFS65_MASK: u32 = 0x02; // MSLUT[2] // microstep table entry 65
    pub const TMC5130_OFS66_MASK: u32 = 0x04; // MSLUT[2] // microstep table entry 66
    pub const TMC5130_OFS67_MASK: u32 = 0x08; // MSLUT[2] // microstep table entry 67
    pub const TMC5130_OFS68_MASK: u32 = 0x10; // MSLUT[2] // microstep table entry 68
    pub const TMC5130_OFS69_MASK: u32 = 0x20; // MSLUT[2] // microstep table entry 69
    pub const TMC5130_OFS70_MASK: u32 = 0x40; // MSLUT[2] // microstep table entry 70
    pub const TMC5130_OFS71_MASK: u32 = 0x80; // MSLUT[2] // microstep table entry 71
    pub const TMC5130_OFS72_MASK: u32 = 0x0100; // MSLUT[2] // microstep table entry 72
    pub const TMC5130_OFS73_MASK: u32 = 0x0200; // MSLUT[2] // microstep table entry 73
    pub const TMC5130_OFS74_MASK: u32 = 0x0400; // MSLUT[2] // microstep table entry 74
    pub const TMC5130_OFS75_MASK: u32 = 0x0800; // MSLUT[2] // microstep table entry 75
    pub const TMC5130_OFS76_MASK: u32 = 0x1000; // MSLUT[2] // microstep table entry 76
    pub const TMC5130_OFS77_MASK: u32 = 0x2000; // MSLUT[2] // microstep table entry 77
    pub const TMC5130_OFS78_MASK: u32 = 0x4000; // MSLUT[2] // microstep table entry 78
    pub const TMC5130_OFS79_MASK: u32 = 0x8000; // MSLUT[2] // microstep table entry 79
    pub const TMC5130_OFS80_MASK: u32 = 0x010000; // MSLUT[2] // microstep table entry 80
    pub const TMC5130_OFS81_MASK: u32 = 0x020000; // MSLUT[2] // microstep table entry 81
    pub const TMC5130_OFS82_MASK: u32 = 0x040000; // MSLUT[2] // microstep table entry 82
    pub const TMC5130_OFS83_MASK: u32 = 0x080000; // MSLUT[2] // microstep table entry 83
    pub const TMC5130_OFS84_MASK: u32 = 0x100000; // MSLUT[2] // microstep table entry 84
    pub const TMC5130_OFS85_MASK: u32 = 0x200000; // MSLUT[2] // microstep table entry 85
    pub const TMC5130_OFS86_MASK: u32 = 0x400000; // MSLUT[2] // microstep table entry 86
    pub const TMC5130_OFS87_MASK: u32 = 0x800000; // MSLUT[2] // microstep table entry 87
    pub const TMC5130_OFS88_MASK: u32 = 0x01000000; // MSLUT[2] // microstep table entry 88
    pub const TMC5130_OFS89_MASK: u32 = 0x02000000; // MSLUT[2] // microstep table entry 89
    pub const TMC5130_OFS90_MASK: u32 = 0x04000000; // MSLUT[2] // microstep table entry 90
    pub const TMC5130_OFS91_MASK: u32 = 0x08000000; // MSLUT[2] // microstep table entry 91
    pub const TMC5130_OFS92_MASK: u32 = 0x10000000; // MSLUT[2] // microstep table entry 92
    pub const TMC5130_OFS93_MASK: u32 = 0x20000000; // MSLUT[2] // microstep table entry 93
    pub const TMC5130_OFS94_MASK: u32 = 0x40000000; // MSLUT[2] // microstep table entry 94
    pub const TMC5130_OFS95_MASK: u32 = 0x80000000; // MSLUT[2] // microstep table entry 95
    pub const TMC5130_OFS96_MASK: u32 = 0x01; // MSLUT[3] // microstep table entry 96
    pub const TMC5130_OFS97_MASK: u32 = 0x02; // MSLUT[3] // microstep table entry 97
    pub const TMC5130_OFS98_MASK: u32 = 0x04; // MSLUT[3] // microstep table entry 98
    pub const TMC5130_OFS99_MASK: u32 = 0x08; // MSLUT[3] // microstep table entry 99
    pub const TMC5130_OFS100_MASK: u32 = 0x10; // MSLUT[3] // microstep table entry 100
    pub const TMC5130_OFS101_MASK: u32 = 0x20; // MSLUT[3] // microstep table entry 101
    pub const TMC5130_OFS102_MASK: u32 = 0x40; // MSLUT[3] // microstep table entry 102
    pub const TMC5130_OFS103_MASK: u32 = 0x80; // MSLUT[3] // microstep table entry 103
    pub const TMC5130_OFS104_MASK: u32 = 0x0100; // MSLUT[3] // microstep table entry 104
    pub const TMC5130_OFS105_MASK: u32 = 0x0200; // MSLUT[3] // microstep table entry 105
    pub const TMC5130_OFS106_MASK: u32 = 0x0400; // MSLUT[3] // microstep table entry 106
    pub const TMC5130_OFS107_MASK: u32 = 0x0800; // MSLUT[3] // microstep table entry 107
    pub const TMC5130_OFS108_MASK: u32 = 0x1000; // MSLUT[3] // microstep table entry 108
    pub const TMC5130_OFS109_MASK: u32 = 0x2000; // MSLUT[3] // microstep table entry 109
    pub const TMC5130_OFS110_MASK: u32 = 0x4000; // MSLUT[3] // microstep table entry 110
    pub const TMC5130_OFS111_MASK: u32 = 0x8000; // MSLUT[3] // microstep table entry 111
    pub const TMC5130_OFS112_MASK: u32 = 0x010000; // MSLUT[3] // microstep table entry 112
    pub const TMC5130_OFS113_MASK: u32 = 0x020000; // MSLUT[3] // microstep table entry 113
    pub const TMC5130_OFS114_MASK: u32 = 0x040000; // MSLUT[3] // microstep table entry 114
    pub const TMC5130_OFS115_MASK: u32 = 0x080000; // MSLUT[3] // microstep table entry 115
    pub const TMC5130_OFS116_MASK: u32 = 0x100000; // MSLUT[3] // microstep table entry 116
    pub const TMC5130_OFS117_MASK: u32 = 0x200000; // MSLUT[3] // microstep table entry 117
    pub const TMC5130_OFS118_MASK: u32 = 0x400000; // MSLUT[3] // microstep table entry 118
    pub const TMC5130_OFS119_MASK: u32 = 0x800000; // MSLUT[3] // microstep table entry 119
    pub const TMC5130_OFS120_MASK: u32 = 0x01000000; // MSLUT[3] // microstep table entry 120
    pub const TMC5130_OFS121_MASK: u32 = 0x02000000; // MSLUT[3] // microstep table entry 121
    pub const TMC5130_OFS122_MASK: u32 = 0x04000000; // MSLUT[3] // microstep table entry 122
    pub const TMC5130_OFS123_MASK: u32 = 0x08000000; // MSLUT[3] // microstep table entry 123
    pub const TMC5130_OFS124_MASK: u32 = 0x10000000; // MSLUT[3] // microstep table entry 124
    pub const TMC5130_OFS125_MASK: u32 = 0x20000000; // MSLUT[3] // microstep table entry 125
    pub const TMC5130_OFS126_MASK: u32 = 0x40000000; // MSLUT[3] // microstep table entry 126
    pub const TMC5130_OFS127_MASK: u32 = 0x80000000; // MSLUT[3] // microstep table entry 127
    pub const TMC5130_OFS128_MASK: u32 = 0x01; // MSLUT[4] // microstep table entry 128
    pub const TMC5130_OFS129_MASK: u32 = 0x02; // MSLUT[4] // microstep table entry 129
    pub const TMC5130_OFS130_MASK: u32 = 0x04; // MSLUT[4] // microstep table entry 130
    pub const TMC5130_OFS131_MASK: u32 = 0x08; // MSLUT[4] // microstep table entry 131
    pub const TMC5130_OFS132_MASK: u32 = 0x10; // MSLUT[4] // microstep table entry 132
    pub const TMC5130_OFS133_MASK: u32 = 0x20; // MSLUT[4] // microstep table entry 133
    pub const TMC5130_OFS134_MASK: u32 = 0x40; // MSLUT[4] // microstep table entry 134
    pub const TMC5130_OFS135_MASK: u32 = 0x80; // MSLUT[4] // microstep table entry 135
    pub const TMC5130_OFS136_MASK: u32 = 0x0100; // MSLUT[4] // microstep table entry 136
    pub const TMC5130_OFS137_MASK: u32 = 0x0200; // MSLUT[4] // microstep table entry 137
    pub const TMC5130_OFS138_MASK: u32 = 0x0400; // MSLUT[4] // microstep table entry 138
    pub const TMC5130_OFS139_MASK: u32 = 0x0800; // MSLUT[4] // microstep table entry 139
    pub const TMC5130_OFS140_MASK: u32 = 0x1000; // MSLUT[4] // microstep table entry 140
    pub const TMC5130_OFS141_MASK: u32 = 0x2000; // MSLUT[4] // microstep table entry 141
    pub const TMC5130_OFS142_MASK: u32 = 0x4000; // MSLUT[4] // microstep table entry 142
    pub const TMC5130_OFS143_MASK: u32 = 0x8000; // MSLUT[4] // microstep table entry 143
    pub const TMC5130_OFS144_MASK: u32 = 0x010000; // MSLUT[4] // microstep table entry 144
    pub const TMC5130_OFS145_MASK: u32 = 0x020000; // MSLUT[4] // microstep table entry 145
    pub const TMC5130_OFS146_MASK: u32 = 0x040000; // MSLUT[4] // microstep table entry 146
    pub const TMC5130_OFS147_MASK: u32 = 0x080000; // MSLUT[4] // microstep table entry 147
    pub const TMC5130_OFS148_MASK: u32 = 0x100000; // MSLUT[4] // microstep table entry 148
    pub const TMC5130_OFS149_MASK: u32 = 0x200000; // MSLUT[4] // microstep table entry 149
    pub const TMC5130_OFS150_MASK: u32 = 0x400000; // MSLUT[4] // microstep table entry 150
    pub const TMC5130_OFS151_MASK: u32 = 0x800000; // MSLUT[4] // microstep table entry 151
    pub const TMC5130_OFS152_MASK: u32 = 0x01000000; // MSLUT[4] // microstep table entry 152
    pub const TMC5130_OFS153_MASK: u32 = 0x02000000; // MSLUT[4] // microstep table entry 153
    pub const TMC5130_OFS154_MASK: u32 = 0x04000000; // MSLUT[4] // microstep table entry 154
    pub const TMC5130_OFS155_MASK: u32 = 0x08000000; // MSLUT[4] // microstep table entry 155
    pub const TMC5130_OFS156_MASK: u32 = 0x10000000; // MSLUT[4] // microstep table entry 156
    pub const TMC5130_OFS157_MASK: u32 = 0x20000000; // MSLUT[4] // microstep table entry 157
    pub const TMC5130_OFS158_MASK: u32 = 0x40000000; // MSLUT[4] // microstep table entry 158
    pub const TMC5130_OFS159_MASK: u32 = 0x80000000; // MSLUT[4] // microstep table entry 159
    pub const TMC5130_OFS160_MASK: u32 = 0x01; // MSLUT[5] // microstep table entry 160
    pub const TMC5130_OFS161_MASK: u32 = 0x02; // MSLUT[5] // microstep table entry 161
    pub const TMC5130_OFS162_MASK: u32 = 0x04; // MSLUT[5] // microstep table entry 162
    pub const TMC5130_OFS163_MASK: u32 = 0x08; // MSLUT[5] // microstep table entry 163
    pub const TMC5130_OFS164_MASK: u32 = 0x10; // MSLUT[5] // microstep table entry 164
    pub const TMC5130_OFS165_MASK: u32 = 0x20; // MSLUT[5] // microstep table entry 165
    pub const TMC5130_OFS166_MASK: u32 = 0x40; // MSLUT[5] // microstep table entry 166
    pub const TMC5130_OFS167_MASK: u32 = 0x80; // MSLUT[5] // microstep table entry 167
    pub const TMC5130_OFS168_MASK: u32 = 0x0100; // MSLUT[5] // microstep table entry 168
    pub const TMC5130_OFS169_MASK: u32 = 0x0200; // MSLUT[5] // microstep table entry 169
    pub const TMC5130_OFS170_MASK: u32 = 0x0400; // MSLUT[5] // microstep table entry 170
    pub const TMC5130_OFS171_MASK: u32 = 0x0800; // MSLUT[5] // microstep table entry 171
    pub const TMC5130_OFS172_MASK: u32 = 0x1000; // MSLUT[5] // microstep table entry 172
    pub const TMC5130_OFS173_MASK: u32 = 0x2000; // MSLUT[5] // microstep table entry 173
    pub const TMC5130_OFS174_MASK: u32 = 0x4000; // MSLUT[5] // microstep table entry 174
    pub const TMC5130_OFS175_MASK: u32 = 0x8000; // MSLUT[5] // microstep table entry 175
    pub const TMC5130_OFS176_MASK: u32 = 0x010000; // MSLUT[5] // microstep table entry 176
    pub const TMC5130_OFS177_MASK: u32 = 0x020000; // MSLUT[5] // microstep table entry 177
    pub const TMC5130_OFS178_MASK: u32 = 0x040000; // MSLUT[5] // microstep table entry 178
    pub const TMC5130_OFS179_MASK: u32 = 0x080000; // MSLUT[5] // microstep table entry 179
    pub const TMC5130_OFS180_MASK: u32 = 0x100000; // MSLUT[5] // microstep table entry 180
    pub const TMC5130_OFS181_MASK: u32 = 0x200000; // MSLUT[5] // microstep table entry 181
    pub const TMC5130_OFS182_MASK: u32 = 0x400000; // MSLUT[5] // microstep table entry 182
    pub const TMC5130_OFS183_MASK: u32 = 0x800000; // MSLUT[5] // microstep table entry 183
    pub const TMC5130_OFS184_MASK: u32 = 0x01000000; // MSLUT[5] // microstep table entry 184
    pub const TMC5130_OFS185_MASK: u32 = 0x02000000; // MSLUT[5] // microstep table entry 185
    pub const TMC5130_OFS186_MASK: u32 = 0x04000000; // MSLUT[5] // microstep table entry 186
    pub const TMC5130_OFS187_MASK: u32 = 0x08000000; // MSLUT[5] // microstep table entry 187
    pub const TMC5130_OFS188_MASK: u32 = 0x10000000; // MSLUT[5] // microstep table entry 188
    pub const TMC5130_OFS189_MASK: u32 = 0x20000000; // MSLUT[5] // microstep table entry 189
    pub const TMC5130_OFS190_MASK: u32 = 0x40000000; // MSLUT[5] // microstep table entry 190
    pub const TMC5130_OFS191_MASK: u32 = 0x80000000; // MSLUT[5] // microstep table entry 191
    pub const TMC5130_OFS192_MASK: u32 = 0x01; // MSLUT[6] // microstep table entry 192
    pub const TMC5130_OFS193_MASK: u32 = 0x02; // MSLUT[6] // microstep table entry 193
    pub const TMC5130_OFS194_MASK: u32 = 0x04; // MSLUT[6] // microstep table entry 194
    pub const TMC5130_OFS195_MASK: u32 = 0x08; // MSLUT[6] // microstep table entry 195
    pub const TMC5130_OFS196_MASK: u32 = 0x10; // MSLUT[6] // microstep table entry 196
    pub const TMC5130_OFS197_MASK: u32 = 0x20; // MSLUT[6] // microstep table entry 197
    pub const TMC5130_OFS198_MASK: u32 = 0x40; // MSLUT[6] // microstep table entry 198
    pub const TMC5130_OFS199_MASK: u32 = 0x80; // MSLUT[6] // microstep table entry 199
    pub const TMC5130_OFS200_MASK: u32 = 0x0100; // MSLUT[6] // microstep table entry 200
    pub const TMC5130_OFS201_MASK: u32 = 0x0200; // MSLUT[6] // microstep table entry 201
    pub const TMC5130_OFS202_MASK: u32 = 0x0400; // MSLUT[6] // microstep table entry 202
    pub const TMC5130_OFS203_MASK: u32 = 0x0800; // MSLUT[6] // microstep table entry 203
    pub const TMC5130_OFS204_MASK: u32 = 0x1000; // MSLUT[6] // microstep table entry 204
    pub const TMC5130_OFS205_MASK: u32 = 0x2000; // MSLUT[6] // microstep table entry 205
    pub const TMC5130_OFS206_MASK: u32 = 0x4000; // MSLUT[6] // microstep table entry 206
    pub const TMC5130_OFS207_MASK: u32 = 0x8000; // MSLUT[6] // microstep table entry 207
    pub const TMC5130_OFS208_MASK: u32 = 0x010000; // MSLUT[6] // microstep table entry 208
    pub const TMC5130_OFS209_MASK: u32 = 0x020000; // MSLUT[6] // microstep table entry 209
    pub const TMC5130_OFS210_MASK: u32 = 0x040000; // MSLUT[6] // microstep table entry 210
    pub const TMC5130_OFS211_MASK: u32 = 0x080000; // MSLUT[6] // microstep table entry 211
    pub const TMC5130_OFS212_MASK: u32 = 0x100000; // MSLUT[6] // microstep table entry 212
    pub const TMC5130_OFS213_MASK: u32 = 0x200000; // MSLUT[6] // microstep table entry 213
    pub const TMC5130_OFS214_MASK: u32 = 0x400000; // MSLUT[6] // microstep table entry 214
    pub const TMC5130_OFS215_MASK: u32 = 0x800000; // MSLUT[6] // microstep table entry 215
    pub const TMC5130_OFS216_MASK: u32 = 0x01000000; // MSLUT[6] // microstep table entry 216
    pub const TMC5130_OFS217_MASK: u32 = 0x02000000; // MSLUT[6] // microstep table entry 217
    pub const TMC5130_OFS218_MASK: u32 = 0x04000000; // MSLUT[6] // microstep table entry 218
    pub const TMC5130_OFS219_MASK: u32 = 0x08000000; // MSLUT[6] // microstep table entry 219
    pub const TMC5130_OFS220_MASK: u32 = 0x10000000; // MSLUT[6] // microstep table entry 220
    pub const TMC5130_OFS221_MASK: u32 = 0x20000000; // MSLUT[6] // microstep table entry 221
    pub const TMC5130_OFS222_MASK: u32 = 0x40000000; // MSLUT[6] // microstep table entry 222
    pub const TMC5130_OFS223_MASK: u32 = 0x80000000; // MSLUT[6] // microstep table entry 223
    pub const TMC5130_OFS224_MASK: u32 = 0x01; // MSLUT[7] // microstep table entry 224
    pub const TMC5130_OFS225_MASK: u32 = 0x02; // MSLUT[7] // microstep table entry 225
    pub const TMC5130_OFS226_MASK: u32 = 0x04; // MSLUT[7] // microstep table entry 226
    pub const TMC5130_OFS227_MASK: u32 = 0x08; // MSLUT[7] // microstep table entry 227
    pub const TMC5130_OFS228_MASK: u32 = 0x10; // MSLUT[7] // microstep table entry 228
    pub const TMC5130_OFS229_MASK: u32 = 0x20; // MSLUT[7] // microstep table entry 229
    pub const TMC5130_OFS230_MASK: u32 = 0x40; // MSLUT[7] // microstep table entry 230
    pub const TMC5130_OFS231_MASK: u32 = 0x80; // MSLUT[7] // microstep table entry 231
    pub const TMC5130_OFS232_MASK: u32 = 0x0100; // MSLUT[7] // microstep table entry 232
    pub const TMC5130_OFS233_MASK: u32 = 0x0200; // MSLUT[7] // microstep table entry 233
    pub const TMC5130_OFS234_MASK: u32 = 0x0400; // MSLUT[7] // microstep table entry 234
    pub const TMC5130_OFS235_MASK: u32 = 0x0800; // MSLUT[7] // microstep table entry 235
    pub const TMC5130_OFS236_MASK: u32 = 0x1000; // MSLUT[7] // microstep table entry 236
    pub const TMC5130_OFS237_MASK: u32 = 0x2000; // MSLUT[7] // microstep table entry 237
    pub const TMC5130_OFS238_MASK: u32 = 0x4000; // MSLUT[7] // microstep table entry 238
    pub const TMC5130_OFS239_MASK: u32 = 0x8000; // MSLUT[7] // microstep table entry 239
    pub const TMC5130_OFS240_MASK: u32 = 0x010000; // MSLUT[7] // microstep table entry 240
    pub const TMC5130_OFS241_MASK: u32 = 0x020000; // MSLUT[7] // microstep table entry 241
    pub const TMC5130_OFS242_MASK: u32 = 0x040000; // MSLUT[7] // microstep table entry 242
    pub const TMC5130_OFS243_MASK: u32 = 0x080000; // MSLUT[7] // microstep table entry 243
    pub const TMC5130_OFS244_MASK: u32 = 0x100000; // MSLUT[7] // microstep table entry 244
    pub const TMC5130_OFS245_MASK: u32 = 0x200000; // MSLUT[7] // microstep table entry 245
    pub const TMC5130_OFS246_MASK: u32 = 0x400000; // MSLUT[7] // microstep table entry 246
    pub const TMC5130_OFS247_MASK: u32 = 0x800000; // MSLUT[7] // microstep table entry 247
    pub const TMC5130_OFS248_MASK: u32 = 0x01000000; // MSLUT[7] // microstep table entry 248
    pub const TMC5130_OFS249_MASK: u32 = 0x02000000; // MSLUT[7] // microstep table entry 249
    pub const TMC5130_OFS250_MASK: u32 = 0x04000000; // MSLUT[7] // microstep table entry 250
    pub const TMC5130_OFS251_MASK: u32 = 0x08000000; // MSLUT[7] // microstep table entry 251
    pub const TMC5130_OFS252_MASK: u32 = 0x10000000; // MSLUT[7] // microstep table entry 252
    pub const TMC5130_OFS253_MASK: u32 = 0x20000000; // MSLUT[7] // microstep table entry 253
    pub const TMC5130_OFS254_MASK: u32 = 0x40000000; // MSLUT[7] // microstep table entry 254
    pub const TMC5130_OFS255_MASK: u32 = 0x80000000; // MSLUT[7] // microstep table entry 255
    pub const TMC5130_W0_MASK: u32 = 0x03; // MSLUTSEL // LUT width select from ofs0 to ofs(X1-1)
    pub const TMC5130_W1_MASK: u32 = 0x0C; // MSLUTSEL // LUT width select from ofs(X1) to ofs(X2-1)
    pub const TMC5130_W2_MASK: u32 = 0x30; // MSLUTSEL // LUT width select from ofs(X2) to ofs(X3-1)
    pub const TMC5130_W3_MASK: u32 = 0xC0; // MSLUTSEL // LUT width select from ofs(X3) to ofs255
    pub const TMC5130_X1_MASK: u32 = 0xFF00; // MSLUTSEL // LUT segment 1 start
    pub const TMC5130_X2_MASK: u32 = 0xFF0000; // MSLUTSEL // LUT segment 2 start
    pub const TMC5130_X3_MASK: u32 = 0xFF000000; // MSLUTSEL // LUT segment 3 start
    pub const TMC5130_START_SIN_MASK: u32 = 0xFF; // MSLUTSTART // Absolute current at microstep table entry 0.
    pub const TMC5130_START_SIN90_MASK: u32 = 0xFF0000; // MSLUTSTART // Absolute current for microstep table entry at positions 256.
    pub const TMC5130_MSCNT_MASK: u32 = 0x03FF; // MSCNT // Microstep counter. Indicates actual position in the microstep table for CUR_A. CUR_B uses an offset of 256 (2 phase motor). Hint: Move to a position where MSCNT is zero before re-initializing MSLUTSTART or MSLUT and MSLUTSEL.
    pub const TMC5130_CUR_A_MASK: u32 = 0x01FF; // MSCURACT // Actual microstep current for motor phase A as read from MSLUT (not scaled by current)
    pub const TMC5130_CUR_B_MASK: u32 = 0x01FF0000; // MSCURACT // Actual microstep current for motor phase B as read from MSLUT (not scaled by current)
    pub const TMC5130_TOFF_MASK: u32 = 0x0F; // CHOPCONF // off time and driver enable
    pub const TMC5130_TFD_ALL_MASK: u32 = 0x70; // CHOPCONF // fast decay time setting
    pub const TMC5130_OFFSET_MASK: u32 = 0x0780; // CHOPCONF // sine wave offset
    pub const TMC5130_TFD_3_MASK: u32 = 0x0800; // CHOPCONF // MSB of fast decay time setting
    pub const TMC5130_DISFDCC_MASK: u32 = 0x1000; // CHOPCONF // fast decay mode
    pub const TMC5130_RNDTF_MASK: u32 = 0x2000; // CHOPCONF // random TOFF time
    pub const TMC5130_CHM_MASK: u32 = 0x4000; // CHOPCONF // chopper mode
    pub const TMC5130_TBL_MASK: u32 = 0x018000; // CHOPCONF // blank time select
    pub const TMC5130_VSENSE_MASK: u32 = 0x020000; // CHOPCONF // sense resistor voltage based current scaling
    pub const TMC5130_VHIGHFS_MASK: u32 = 0x040000; // CHOPCONF // high velocity fullstep selection
    pub const TMC5130_VHIGHCHM_MASK: u32 = 0x080000; // CHOPCONF // high velocity chopper mode
    pub const TMC5130_SYNC_MASK: u32 = 0xF00000; // CHOPCONF // PWM synchronization clock
    pub const TMC5130_MRES_MASK: u32 = 0x0F000000; // CHOPCONF // Micro step resolution; The resolution gives the number of microstep entries per sine quarter wave. The driver automatically uses microstep positions which result in a symmetrical wave, when choosing a lower microstep resolution.
    pub const TMC5130_INTPOL_MASK: u32 = 0x10000000; // CHOPCONF // interpolation to 256 microsteps
    pub const TMC5130_DEDGE_MASK: u32 = 0x20000000; // CHOPCONF // enable double edge step pulses
    pub const TMC5130_DISS2G_MASK: u32 = 0x40000000; // CHOPCONF // short to GND protection disable
    pub const TMC5130_HSTRT_MASK: u32 = 0x70; // CHOPCONF // hysteresis start value added to HEND; Attention: Effective HEND+HSTRT less than or equal to 16. Hint: Hysteresis decrement is done each 16 clocks
    pub const TMC5130_HEND_MASK: u32 = 0x0780; // CHOPCONF // hysteresis low value
    pub const TMC5130_SEMIN_MASK: u32 = 0x0F; // COOLCONF // minimum stallGuard2 value - If the stallGuard2 result falls below SEMIN*32, the motor current becomes increased to reduce motor load angle. 0: smart current control coolStep off
    pub const TMC5130_SEUP_MASK: u32 = 0x60; // COOLCONF // Current increment steps per measured stallGuard2 value
    pub const TMC5130_SEMAX_MASK: u32 = 0x0F00; // COOLCONF // stallGuard2 hysteresis value - If the stallGuard2 result is equal to or above (SEMIN+SEMAX+1)*32, the motor current becomes decreased to save energy.
    pub const TMC5130_SEDN_MASK: u32 = 0x6000; // COOLCONF // Current down step speed; For each n stallGuard2 values decrease by one
    pub const TMC5130_SEIMIN_MASK: u32 = 0x8000; // COOLCONF // minimum current for smart current control
    pub const TMC5130_SGT_MASK: u32 = 0x7F0000; // COOLCONF // stallGuard2 threshold value This signed value controls stallGuard2 level for stall output and sets the optimum measurement range for readout. A lower value gives a higher sensitivity. Zero is the starting value working with most motors. A higher value makes stallGuard2 less sensitive and requires more torque to indicate a stall.
    pub const TMC5130_SFILT_MASK: u32 = 0x01000000; // COOLCONF // stallGuard2 filter enable
    pub const TMC5130_DC_TIME_MASK: u32 = 0x03FF; // DCCTRL // Upper PWM on time limit for commutation (DC_TIME * 1/f CLK ). Set slightly above effective blank time TBL.
    pub const TMC5130_DC_SG_MASK: u32 = 0xFF0000; // DCCTRL // Max. PWM on time for step loss detection using dcStep stallGuard2 in dcStep mode. (DC_SG * 16/f CLK); Set slightly higher than DC_TIME/16; 0=disable
    pub const TMC5130_SG_RESULT_MASK: u32 = 0x03FF; // DRV_STATUS // Mechanical load measurement: The stallGuard2 result gives a means to measure mechanical motor load. A higher value means lower mechanical load. A value of 0 signals highest load. With optimum SGT setting, this is an indicator for a motor stall. The stall detection compares SG_RESULT to 0 in order to detect a stall. SG_RESULT is used as a base for coolStep operation, by comparing it to a programmable upper and a lower limit. It is not applicable in stealthChop mode. SG_RESULT is ALSO applicable when dcStep is active. stallGuard2 works best with microstep operation. Temperature measurement: In standstill, no stallGuard2 result can be obtained. SG_RESULT shows the chopper on-time for motor coil A instead. If the motor is moved to a determined microstep position at a certain current setting, a comparison of the chopper on-time can help to get a rough estimation of motor temperature. As the motor heats up, its coil resistance rises and the chopper on-time increases.
    pub const TMC5130_FSACTIVE_MASK: u32 = 0x8000; // DRV_STATUS // Full step active indicator
    pub const TMC5130_CS_ACTUAL_MASK: u32 = 0x1F0000; // DRV_STATUS // Actual current control scaling, for monitoring smart energy current scaling controlled via settings in register COOLCONF, or for monitoring the function of the automatic current scaling.
    pub const TMC5130_STALLGUARD_MASK: u32 = 0x01000000; // DRV_STATUS //
    pub const TMC5130_OT_MASK: u32 = 0x02000000; // DRV_STATUS //
    pub const TMC5130_OTPW_MASK: u32 = 0x04000000; // DRV_STATUS //
    pub const TMC5130_S2GA_MASK: u32 = 0x08000000; // DRV_STATUS //
    pub const TMC5130_S2GB_MASK: u32 = 0x10000000; // DRV_STATUS //
    pub const TMC5130_OLA_MASK: u32 = 0x20000000; // DRV_STATUS //
    pub const TMC5130_OLB_MASK: u32 = 0x40000000; // DRV_STATUS //
    pub const TMC5130_STST_MASK: u32 = 0x80000000; // DRV_STATUS //
    pub const TMC5130_PWM_AMPL_MASK: u32 = 0xFF; // PWMCONF // User defined PWM amplitude offset (0-255) The resulting amplitude (limited to 0-255) is: PWM_AMPL + PWM_GRAD * 256 / TSTEP
    pub const TMC5130_PWM_GRAD_MASK: u32 = 0xFF00; // PWMCONF // Velocity dependent gradient for PWM amplitude: PWM_GRAD * 256 / TSTEP is added to PWM_AMPL
    pub const TMC5130_PWM_FREQ_MASK: u32 = 0x030000; // PWMCONF // PWM frequency selection
    pub const TMC5130_PWM_AUTOSCALE_MASK: u32 = 0x040000; // PWMCONF // PWM automatic amplitude scaling
    pub const TMC5130_PWM_SYMMETRIC_MASK: u32 = 0x080000; // PWMCONF // Force symmetric PWM
    pub const TMC5130_FREEWHEEL_MASK: u32 = 0x300000; // PWMCONF // Allows different standstill modes
    pub const TMC5130_PWM_SCALE_MASK: u32 = 0xFF; // PWM_SCALE // Actual PWM amplitude scaler (255=max. Voltage) In voltage mode PWM, this value allows to detect a motor stall.
    pub const TMC5130_INV_MASK: u32 = 0x01; // ENCM_CTRL //
    pub const TMC5130_MAXSPEED_MASK: u32 = 0x02; // ENCM_CTRL //
    pub const TMC5130_LOST_STEPS_MASK: u32 = 0x0FFFFF; // LOST_STEPS // Number of input steps skipped due to higher load in dcStep operation, if step input does not stop when DC_OUT is low. This counter wraps around after 2^20 steps. Counts up or down depending on direction.
}

#[allow(non_snake_case)]
pub mod SHIFT {
    pub const TMC5130_SW_STOPL_ENABLE_SHIFT: u8 = 0;
    pub const TMC5130_SW_STOPR_ENABLE_SHIFT: u8 = 1;
    pub const TMC5130_SW_STOPL_POLARITY_SHIFT: u8 = 2;
    pub const TMC5130_SW_STOPR_POLARITY_SHIFT: u8 = 3;
    pub const TMC5130_SW_SWAP_LR_SHIFT: u8 = 4;
    pub const TMC5130_SW_LATCH_L_ACT_SHIFT: u8 = 5;
    pub const TMC5130_SW_LATCH_L_INACT_SHIFT: u8 = 6;
    pub const TMC5130_SW_LATCH_R_ACT_SHIFT: u8 = 7;
    pub const TMC5130_SW_LATCH_R_INACT_SHIFT: u8 = 8;
    pub const TMC5130_SW_LATCH_ENC_SHIFT: u8 = 9;
    pub const TMC5130_SW_SG_STOP_SHIFT: u8 = 10;
    pub const TMC5130_SW_SOFTSTOP_SHIFT: u8 = 11;
    pub const TMC5130_RS_STOPL_SHIFT: u8 = 0;
    pub const TMC5130_RS_STOPR_SHIFT: u8 = 1;
    pub const TMC5130_RS_LATCHL_SHIFT: u8 = 2;
    pub const TMC5130_RS_LATCHR_SHIFT: u8 = 3;
    pub const TMC5130_RS_EV_STOPL_SHIFT: u8 = 4;
    pub const TMC5130_RS_EV_STOPR_SHIFT: u8 = 5;
    pub const TMC5130_RS_EV_STOP_SG_SHIFT: u8 = 6;
    pub const TMC5130_RS_EV_POSREACHED_SHIFT: u8 = 7;
    pub const TMC5130_RS_VELREACHED_SHIFT: u8 = 8;
    pub const TMC5130_RS_POSREACHED_SHIFT: u8 = 9;
    pub const TMC5130_RS_VZERO_SHIFT: u8 = 10;
    pub const TMC5130_RS_ZEROWAIT_SHIFT: u8 = 11;
    pub const TMC5130_RS_SECONDMOVE_SHIFT: u8 = 12;
    pub const TMC5130_RS_SG_SHIFT: u8 = 13;
    pub const TMC5130_I_SCALE_ANALOG_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_INTERNAL_RSENSE_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EN_PWM_MODE_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENC_COMMUTATION_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SHAFT_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG0_ERROR_ONLY_WITH_SD_MODE1_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG0_OTPW_ONLY_WITH_SD_MODE1_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG0_STALL_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_STALL_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_INDEX_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_ONSTATE_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_STEPS_SKIPPED_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG0_INT_PUSHPULL_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_POSCOMP_PUSHPULL_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SMALL_HYSTERESIS_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STOP_ENABLE_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIRECT_MODE_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_TEST_MODE_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG0_STEP_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DIAG1_DIR_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_RESET_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DRV_ERR_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_UV_CP_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_IFCNT_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_SLAVEADDR_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_SENDDELAY_SHIFT: u8 = 8; // min.: 0, max.: 15, default: 0
    pub const TMC5130_REFL_STEP_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_REFR_DIR_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENCB_DCEN_CFG4_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENCA_DCIN_CFG5_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DRV_ENN_CFG6_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENC_N_DCO_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SD_MODE_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SWCOMP_IN_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_VERSION_SHIFT: u8 = 24; // min.: 0, max.: 255, default: 0
    pub const TMC5130_OUTPUT_PIN_POLARITY_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_X_COMPARE_SHIFT: u8 = 0; // min.: 0, max.: 4294967295, default: 0
    pub const TMC5130_IHOLD_SHIFT: u8 = 0; // min.: 0, max.: 31, default: 0
    pub const TMC5130_IRUN_SHIFT: u8 = 8; // min.: 0, max.: 31, default: 0
    pub const TMC5130_IHOLDDELAY_SHIFT: u8 = 16; // min.: 0, max.: 15, default: 0
    pub const TMC5130_TPOWERDOWN_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_TSTEP_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
    pub const TMC5130_TPWMTHRS_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
    pub const TMC5130_TCOOLTHRS_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
    pub const TMC5130_THIGH_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
    pub const TMC5130_RAMPMODE_SHIFT: u8 = 0; // min.: 0, max.: 3, default: 0
    pub const TMC5130_XACTUAL_SHIFT: u8 = 0; // min.: -2147483648, max.: 2147483647, default: 0
    pub const TMC5130_VACTUAL_SHIFT: u8 = 0; // min.: -8388607, max.: 8388607, default: 0
    pub const TMC5130_VSTART_SHIFT: u8 = 0; // min.: 0, max.: 262143, default: 0
    pub const TMC5130_A1_SHIFT: u8 = 0; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_V1_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
    pub const TMC5130_AMAX_SHIFT: u8 = 0; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_VMAX_SHIFT: u8 = 0; // min.: 0, max.: 8388096, default: 0
    pub const TMC5130_DMAX_SHIFT: u8 = 0; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_D1_SHIFT: u8 = 0; // min.: 1, max.: 65535, default: 0
    pub const TMC5130_VSTOP_SHIFT: u8 = 0; // min.: 1, max.: 262143, default: 0
    pub const TMC5130_TZEROWAIT_SHIFT: u8 = 0; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_XTARGET_SHIFT: u8 = 0; // min.: -2147483648, max.: 2147483647, default: 0
    pub const TMC5130_VDCMIN_SHIFT: u8 = 0; // min.: 0, max.: 8388607, default: 0
    pub const TMC5130_STOP_L_ENABLE_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STOP_R_ENABLE_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POL_STOP_L_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POL_STOP_R_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SWAP_LR_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LATCH_L_ACTIVE_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LATCH_L_INACTIVE_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LATCH_R_ACTIVE_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LATCH_R_INACTIVE_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EN_LATCH_ENCODER_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SG_STOP_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EN_SOFTSTOP_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STATUS_STOP_L_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STATUS_STOP_R_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STATUS_LATCH_L_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STATUS_LATCH_R_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EVENT_STOP_L_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EVENT_STOP_R_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EVENT_STOP_SG_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_EVENT_POS_REACHED_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_VELOCITY_REACHED_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POSITION_REACHED_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_VZERO_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_T_ZEROWAIT_ACTIVE_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SECOND_MOVE_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STATUS_SG_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_XLATCH_SHIFT: u8 = 0; // min.: 0, max.: 4294967295, default: 0
    pub const TMC5130_POL_A_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POL_B_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POL_N_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_IGNORE_AB_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_CLR_CONT_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_CLR_ONCE_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_POS_EDGENEG_EDGE_SHIFT: u8 = 6; // min.: 0, max.: 3, default: 0
    pub const TMC5130_CLR_ENC_X_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LATCH_X_ACT_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENC_SEL_DECIMAL_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_X_ENC_SHIFT: u8 = 0; // min.: -2147483648, max.: 2147483647, default: 0
    pub const TMC5130_INTEGER_SHIFT: u8 = 16; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_FRACTIONAL_SHIFT: u8 = 0; // min.: 0, max.: 65535, default: 0
    pub const TMC5130_ENC_STATUS_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_ENC_LATCH_SHIFT: u8 = 0; // min.: -2147483648, max.: 2147483647, default: 0
    pub const TMC5130_OFS0_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS1_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS2_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS3_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS4_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS5_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS6_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS7_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS8_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS9_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS10_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS11_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS12_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS13_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS14_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS15_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS16_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS17_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS18_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS19_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS20_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS21_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS22_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS23_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS24_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS25_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS26_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS27_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS28_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS29_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS30_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS31_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS32_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS33_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS34_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS35_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS36_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS37_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS38_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS39_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS40_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS41_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS42_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS43_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS44_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS45_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS46_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS47_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS48_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS49_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS50_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS51_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS52_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS53_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS54_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS55_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS56_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS57_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS58_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS59_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS60_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS61_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS62_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS63_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS64_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS65_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS66_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS67_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS68_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS69_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS70_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS71_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS72_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS73_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS74_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS75_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS76_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS77_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS78_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS79_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS80_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS81_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS82_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS83_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS84_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS85_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS86_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS87_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS88_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS89_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS90_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS91_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS92_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS93_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS94_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS95_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS96_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS97_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS98_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS99_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS100_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS101_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS102_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS103_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS104_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS105_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS106_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS107_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS108_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS109_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS110_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS111_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS112_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS113_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS114_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS115_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS116_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS117_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS118_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS119_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS120_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS121_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS122_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS123_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS124_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS125_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS126_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS127_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS128_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS129_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS130_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS131_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS132_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS133_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS134_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS135_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS136_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS137_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS138_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS139_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS140_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS141_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS142_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS143_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS144_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS145_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS146_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS147_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS148_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS149_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS150_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS151_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS152_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS153_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS154_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS155_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS156_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS157_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS158_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS159_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS160_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS161_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS162_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS163_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS164_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS165_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS166_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS167_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS168_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS169_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS170_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS171_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS172_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS173_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS174_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS175_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS176_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS177_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS178_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS179_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS180_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS181_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS182_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS183_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS184_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS185_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS186_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS187_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS188_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS189_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS190_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS191_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS192_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS193_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS194_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS195_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS196_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS197_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS198_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS199_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS200_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS201_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS202_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS203_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS204_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS205_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS206_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS207_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS208_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS209_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS210_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS211_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS212_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS213_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS214_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS215_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS216_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS217_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS218_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS219_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS220_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS221_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS222_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS223_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS224_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS225_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS226_SHIFT: u8 = 2; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS227_SHIFT: u8 = 3; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS228_SHIFT: u8 = 4; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS229_SHIFT: u8 = 5; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS230_SHIFT: u8 = 6; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS231_SHIFT: u8 = 7; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS232_SHIFT: u8 = 8; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS233_SHIFT: u8 = 9; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS234_SHIFT: u8 = 10; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS235_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS236_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS237_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS238_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS239_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS240_SHIFT: u8 = 16; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS241_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS242_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS243_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS244_SHIFT: u8 = 20; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS245_SHIFT: u8 = 21; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS246_SHIFT: u8 = 22; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS247_SHIFT: u8 = 23; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS248_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS249_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS250_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS251_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS252_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS253_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS254_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OFS255_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_W0_SHIFT: u8 = 0; // min.: 0, max.: 3, default: 0
    pub const TMC5130_W1_SHIFT: u8 = 2; // min.: 0, max.: 3, default: 0
    pub const TMC5130_W2_SHIFT: u8 = 4; // min.: 0, max.: 3, default: 0
    pub const TMC5130_W3_SHIFT: u8 = 6; // min.: 0, max.: 3, default: 0
    pub const TMC5130_X1_SHIFT: u8 = 8; // min.: 0, max.: 255, default: 0
    pub const TMC5130_X2_SHIFT: u8 = 16; // min.: 0, max.: 255, default: 0
    pub const TMC5130_X3_SHIFT: u8 = 24; // min.: 0, max.: 255, default: 0
    pub const TMC5130_START_SIN_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_START_SIN90_SHIFT: u8 = 16; // min.: 0, max.: 255, default: 0
    pub const TMC5130_MSCNT_SHIFT: u8 = 0; // min.: 0, max.: 1023, default: 0
    pub const TMC5130_CUR_A_SHIFT: u8 = 0; // min.: -256, max.: 255, default: 0
    pub const TMC5130_CUR_B_SHIFT: u8 = 16; // min.: -256, max.: 255, default: 0
    pub const TMC5130_TOFF_SHIFT: u8 = 0; // min.: 0, max.: 15, default: 0
    pub const TMC5130_TFD_ALL_SHIFT: u8 = 4; // min.: 0, max.: 7, default: 0
    pub const TMC5130_OFFSET_SHIFT: u8 = 7; // min.: 0, max.: 15, default: 0
    pub const TMC5130_TFD_3_SHIFT: u8 = 11; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DISFDCC_SHIFT: u8 = 12; // min.: 0, max.: 1, default: 0
    pub const TMC5130_RNDTF_SHIFT: u8 = 13; // min.: 0, max.: 1, default: 0
    pub const TMC5130_CHM_SHIFT: u8 = 14; // min.: 0, max.: 1, default: 0
    pub const TMC5130_TBL_SHIFT: u8 = 15; // min.: 0, max.: 3, default: 0
    pub const TMC5130_VSENSE_SHIFT: u8 = 17; // min.: 0, max.: 1, default: 0
    pub const TMC5130_VHIGHFS_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_VHIGHCHM_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SYNC_SHIFT: u8 = 20; // min.: 0, max.: 15, default: 0
    pub const TMC5130_MRES_SHIFT: u8 = 24; // min.: 0, max.: 8, default: 0
    pub const TMC5130_INTPOL_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DEDGE_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DISS2G_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_HSTRT_SHIFT: u8 = 4; // min.: 0, max.: 7, default: 0
    pub const TMC5130_HEND_SHIFT: u8 = 7; // min.: 0, max.: 15, default: 0
    pub const TMC5130_SEMIN_SHIFT: u8 = 0; // min.: 0, max.: 15, default: 0
    pub const TMC5130_SEUP_SHIFT: u8 = 5; // min.: 0, max.: 3, default: 0
    pub const TMC5130_SEMAX_SHIFT: u8 = 8; // min.: 0, max.: 15, default: 0
    pub const TMC5130_SEDN_SHIFT: u8 = 13; // min.: 0, max.: 3, default: 0
    pub const TMC5130_SEIMIN_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_SGT_SHIFT: u8 = 16; // min.: -64, max.: 63, default: 0
    pub const TMC5130_SFILT_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_DC_TIME_SHIFT: u8 = 0; // min.: 0, max.: 1023, default: 0
    pub const TMC5130_DC_SG_SHIFT: u8 = 16; // min.: 0, max.: 255, default: 0
    pub const TMC5130_SG_RESULT_SHIFT: u8 = 0; // min.: 0, max.: 1023, default: 0
    pub const TMC5130_FSACTIVE_SHIFT: u8 = 15; // min.: 0, max.: 1, default: 0
    pub const TMC5130_CS_ACTUAL_SHIFT: u8 = 16; // min.: 0, max.: 31, default: 0
    pub const TMC5130_STALLGUARD_SHIFT: u8 = 24; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OT_SHIFT: u8 = 25; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OTPW_SHIFT: u8 = 26; // min.: 0, max.: 1, default: 0
    pub const TMC5130_S2GA_SHIFT: u8 = 27; // min.: 0, max.: 1, default: 0
    pub const TMC5130_S2GB_SHIFT: u8 = 28; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OLA_SHIFT: u8 = 29; // min.: 0, max.: 1, default: 0
    pub const TMC5130_OLB_SHIFT: u8 = 30; // min.: 0, max.: 1, default: 0
    pub const TMC5130_STST_SHIFT: u8 = 31; // min.: 0, max.: 1, default: 0
    pub const TMC5130_PWM_AMPL_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_PWM_GRAD_SHIFT: u8 = 8; // min.: 0, max.: 255, default: 0
    pub const TMC5130_PWM_FREQ_SHIFT: u8 = 16; // min.: 0, max.: 3, default: 0
    pub const TMC5130_PWM_AUTOSCALE_SHIFT: u8 = 18; // min.: 0, max.: 1, default: 0
    pub const TMC5130_PWM_SYMMETRIC_SHIFT: u8 = 19; // min.: 0, max.: 1, default: 0
    pub const TMC5130_FREEWHEEL_SHIFT: u8 = 20; // min.: 0, max.: 3, default: 0
    pub const TMC5130_PWM_SCALE_SHIFT: u8 = 0; // min.: 0, max.: 255, default: 0
    pub const TMC5130_INV_SHIFT: u8 = 0; // min.: 0, max.: 1, default: 0
    pub const TMC5130_MAXSPEED_SHIFT: u8 = 1; // min.: 0, max.: 1, default: 0
    pub const TMC5130_LOST_STEPS_SHIFT: u8 = 0; // min.: 0, max.: 1048575, default: 0
}